#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# ==========
# = BASICS =
# ==========

export PATH="$PATH:/Users/andrew/bin"
export EDITOR="/usr/local/bin/mate -w"
export VISUAL=$EDITOR

# Makes sure patterns match properly in my locale.
export LC_CTYPE=en_US.UTF-8

# ============
# = BUILDING =
# ============

# 64-bit architecture, so x86_64 should work for most things, but I've found
# the need to toggle between these in the past.

# export ARCHFLAGS="-arch i386 -arch x86_64" 
export ARCHFLAGS='-arch x86_64'


# =======
# = GIT =
# =======

export GIT_COMMITTER_NAME="Andrew Dupont"
export GIT_COMMITTER_EMAIL="github@andrewdupont.net"

export GIT_EDITOR=$EDITOR
git config --global core.editor 'mate -w'


# ==========
# = GITHUB =
# ==========

# Keep this outside of version control.
if [[ -s "${ZDOTDIR:-$HOME}/.github" ]]; then
  source "${ZDOTDIR:-$HOME}/.github"
fi


# ============
# = AUTOJUMP =
# ============

[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh


# =========
# = RBENV =
# =========

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi



# =============
# = FUNCTIONS =
# =============

# Turn a video file into a GIF.
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "Proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# `cd` into the directory of the frontmost Finder window.
cdf() {
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# Start an HTTP server from a directory, optionally specifying the port.
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of
  # `application/octet-stream`. And serve everything as UTF-8 â€” although not
  # technically correct, this doesn't break anything for binary files.
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Display a git log with per-commit cmd-clickable GitHub URLs. (iTerm version)
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  if [[ -z "$remote" ]]; then
    return
  fi
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}